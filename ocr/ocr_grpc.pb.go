// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcrServerClient is the client API for OcrServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcrServerClient interface {
	// Sends a greeting
	Getcaptcha(ctx context.Context, in *ImageBuffer, opts ...grpc.CallOption) (*Captcha, error)
}

type ocrServerClient struct {
	cc grpc.ClientConnInterface
}

func NewOcrServerClient(cc grpc.ClientConnInterface) OcrServerClient {
	return &ocrServerClient{cc}
}

func (c *ocrServerClient) Getcaptcha(ctx context.Context, in *ImageBuffer, opts ...grpc.CallOption) (*Captcha, error) {
	out := new(Captcha)
	err := c.cc.Invoke(ctx, "/OcrServer/Getcaptcha", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcrServerServer is the server API for OcrServer service.
// All implementations must embed UnimplementedOcrServerServer
// for forward compatibility
type OcrServerServer interface {
	// Sends a greeting
	Getcaptcha(context.Context, *ImageBuffer) (*Captcha, error)
	mustEmbedUnimplementedOcrServerServer()
}

// UnimplementedOcrServerServer must be embedded to have forward compatible implementations.
type UnimplementedOcrServerServer struct {
}

func (UnimplementedOcrServerServer) Getcaptcha(context.Context, *ImageBuffer) (*Captcha, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Getcaptcha not implemented")
}
func (UnimplementedOcrServerServer) mustEmbedUnimplementedOcrServerServer() {}

// UnsafeOcrServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcrServerServer will
// result in compilation errors.
type UnsafeOcrServerServer interface {
	mustEmbedUnimplementedOcrServerServer()
}

func RegisterOcrServerServer(s grpc.ServiceRegistrar, srv OcrServerServer) {
	s.RegisterService(&OcrServer_ServiceDesc, srv)
}

func _OcrServer_Getcaptcha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageBuffer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcrServerServer).Getcaptcha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OcrServer/Getcaptcha",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcrServerServer).Getcaptcha(ctx, req.(*ImageBuffer))
	}
	return interceptor(ctx, in, info, handler)
}

// OcrServer_ServiceDesc is the grpc.ServiceDesc for OcrServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcrServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "OcrServer",
	HandlerType: (*OcrServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Getcaptcha",
			Handler:    _OcrServer_Getcaptcha_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ocr/ocr.proto",
}
